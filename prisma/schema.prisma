// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    // for Vercel database 
    provider          = "postgresql"
    url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?
    accounts      Account[]
    sessions      Session[]
    Capsule       Capsule[]
    Like          Like[]
    Comment       Comment[]
    Payment       Payment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Capsule {
    id            String    @id @default(cuid())
    dateTime      DateTime
    message       String // @db.Text
    sendingMethod String[]
    public        Boolean   @default(false)
    email         String?
    phone         String?
    image         String?
    voiceMessage  String?
    opened        Boolean   @default(false)
    openedAt      DateTime?
    call          String?
    userId        String
    user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    openIn        Int?
    subject       String
    likes         Like[]
    comments      Comment[]
    payment       Payment[]
    paid          Boolean   @default(false)
    paymentId     String?

    @@unique([paymentId])
}

model Like {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    capsuleId String
    capsule   Capsule  @relation(fields: [capsuleId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Comment {
    id        String   @id @default(cuid())
    userId    String
    body      String
    user      User     @relation(fields: [userId], references: [id])
    capsuleId String
    capsule   Capsule  @relation(fields: [capsuleId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Payment {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    capsuleId String
    capsule   Capsule  @relation(fields: [capsuleId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    price     String?
}
